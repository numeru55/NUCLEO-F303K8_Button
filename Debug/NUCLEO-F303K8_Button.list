
NUCLEO-F303K8_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002574  08002574  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002574  08002574  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002574  08002574  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800257c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088fe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001287  00000000  00000000  0002893a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00029bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005a8  00000000  00000000  0002a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000196bf  00000000  00000000  0002a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000082cd  00000000  00000000  00043e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000969d8  00000000  00000000  0004c10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000e2ae4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001798  00000000  00000000  000e2b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002524 	.word	0x08002524

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002524 	.word	0x08002524

080001c8 <Button_Loop>:
} ButtonState = INIT;

#define ButtonTime 10 // in msec
#define ButtonRead HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) // define Button place: Pull upped, 1 is OFF, 0 is ON

int Button_Loop(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	int prev_time;

	if (ButtonRead) // 1 is OFF, 0 is ON
 80001ce:	2101      	movs	r1, #1
 80001d0:	4826      	ldr	r0, [pc, #152]	; (800026c <Button_Loop+0xa4>)
 80001d2:	f000 fcbf 	bl	8000b54 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d019      	beq.n	8000210 <Button_Loop+0x48>
	{
		// release?
		switch (ButtonState) {
 80001dc:	4b24      	ldr	r3, [pc, #144]	; (8000270 <Button_Loop+0xa8>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b02      	cmp	r3, #2
 80001e2:	d002      	beq.n	80001ea <Button_Loop+0x22>
 80001e4:	2b03      	cmp	r3, #3
 80001e6:	d008      	beq.n	80001fa <Button_Loop+0x32>
			if ((HAL_GetTick() - prev_time) > ButtonTime) {
				ButtonState = CLICKED;
			}
			break;
		default:
			break;
 80001e8:	e039      	b.n	800025e <Button_Loop+0x96>
			ButtonState = RELEASED;
 80001ea:	4b21      	ldr	r3, [pc, #132]	; (8000270 <Button_Loop+0xa8>)
 80001ec:	2203      	movs	r2, #3
 80001ee:	701a      	strb	r2, [r3, #0]
			prev_time = HAL_GetTick();
 80001f0:	f000 fa4c 	bl	800068c <HAL_GetTick>
 80001f4:	4603      	mov	r3, r0
 80001f6:	607b      	str	r3, [r7, #4]
			break;
 80001f8:	e031      	b.n	800025e <Button_Loop+0x96>
			if ((HAL_GetTick() - prev_time) > ButtonTime) {
 80001fa:	f000 fa47 	bl	800068c <HAL_GetTick>
 80001fe:	4602      	mov	r2, r0
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	1ad3      	subs	r3, r2, r3
 8000204:	2b0a      	cmp	r3, #10
 8000206:	d925      	bls.n	8000254 <Button_Loop+0x8c>
				ButtonState = CLICKED;
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <Button_Loop+0xa8>)
 800020a:	2204      	movs	r2, #4
 800020c:	701a      	strb	r2, [r3, #0]
			break;
 800020e:	e021      	b.n	8000254 <Button_Loop+0x8c>
		}
	} else {
		// push?
		switch (ButtonState) {
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <Button_Loop+0xa8>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b04      	cmp	r3, #4
 8000216:	d019      	beq.n	800024c <Button_Loop+0x84>
 8000218:	2b04      	cmp	r3, #4
 800021a:	dc1d      	bgt.n	8000258 <Button_Loop+0x90>
 800021c:	2b00      	cmp	r3, #0
 800021e:	d002      	beq.n	8000226 <Button_Loop+0x5e>
 8000220:	2b01      	cmp	r3, #1
 8000222:	d008      	beq.n	8000236 <Button_Loop+0x6e>
			break;
		case CLICKED:
			ButtonState = INIT;
			break;
		default:
			break;
 8000224:	e018      	b.n	8000258 <Button_Loop+0x90>
			ButtonState = PRESSED;
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <Button_Loop+0xa8>)
 8000228:	2201      	movs	r2, #1
 800022a:	701a      	strb	r2, [r3, #0]
			prev_time = HAL_GetTick();
 800022c:	f000 fa2e 	bl	800068c <HAL_GetTick>
 8000230:	4603      	mov	r3, r0
 8000232:	607b      	str	r3, [r7, #4]
			break;
 8000234:	e013      	b.n	800025e <Button_Loop+0x96>
			if ((HAL_GetTick() - prev_time) > ButtonTime) {
 8000236:	f000 fa29 	bl	800068c <HAL_GetTick>
 800023a:	4602      	mov	r2, r0
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	1ad3      	subs	r3, r2, r3
 8000240:	2b0a      	cmp	r3, #10
 8000242:	d90b      	bls.n	800025c <Button_Loop+0x94>
				ButtonState = PRESSING;
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <Button_Loop+0xa8>)
 8000246:	2202      	movs	r2, #2
 8000248:	701a      	strb	r2, [r3, #0]
			break;
 800024a:	e007      	b.n	800025c <Button_Loop+0x94>
			ButtonState = INIT;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <Button_Loop+0xa8>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
			break;
 8000252:	e004      	b.n	800025e <Button_Loop+0x96>
			break;
 8000254:	bf00      	nop
 8000256:	e002      	b.n	800025e <Button_Loop+0x96>
			break;
 8000258:	bf00      	nop
 800025a:	e000      	b.n	800025e <Button_Loop+0x96>
			break;
 800025c:	bf00      	nop
		}
	}
	return ButtonState;
 800025e:	4b04      	ldr	r3, [pc, #16]	; (8000270 <Button_Loop+0xa8>)
 8000260:	781b      	ldrb	r3, [r3, #0]
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	48000400 	.word	0x48000400
 8000270:	20000028 	.word	0x20000028

08000274 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000278:	f000 f9ae 	bl	80005d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027c:	f000 f816 	bl	80002ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000280:	f000 f880 	bl	8000384 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000284:	f000 f84e 	bl	8000324 <MX_USART2_UART_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (Button_Loop() == CLICKED) {
 8000288:	f7ff ff9e 	bl	80001c8 <Button_Loop>
 800028c:	4603      	mov	r3, r0
 800028e:	2b04      	cmp	r3, #4
 8000290:	d1fa      	bne.n	8000288 <main+0x14>
			ButtonState = INIT;
 8000292:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <main+0x30>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000298:	2108      	movs	r1, #8
 800029a:	4803      	ldr	r0, [pc, #12]	; (80002a8 <main+0x34>)
 800029c:	f000 fc8a 	bl	8000bb4 <HAL_GPIO_TogglePin>
		if (Button_Loop() == CLICKED) {
 80002a0:	e7f2      	b.n	8000288 <main+0x14>
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028
 80002a8:	48000400 	.word	0x48000400

080002ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b090      	sub	sp, #64	; 0x40
 80002b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	2228      	movs	r2, #40	; 0x28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 f92a 	bl	8002514 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d6:	2310      	movs	r3, #16
 80002d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002da:	2300      	movs	r3, #0
 80002dc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fc80 	bl	8000be8 <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x46>
		Error_Handler();
 80002ee:	f000 f89f 	bl	8000430 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fb74 	bl	80019f8 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x6e>
		Error_Handler();
 8000316:	f000 f88b 	bl	8000430 <Error_Handler>
	}
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	; 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <MX_USART2_UART_Init+0x58>)
 800032a:	4a15      	ldr	r2, [pc, #84]	; (8000380 <MX_USART2_UART_Init+0x5c>)
 800032c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000330:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000334:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_USART2_UART_Init+0x58>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_USART2_UART_Init+0x58>)
 8000368:	f001 fd7c 	bl	8001e64 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000372:	f000 f85d 	bl	8000430 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	2000002c 	.word	0x2000002c
 8000380:	40004400 	.word	0x40004400

08000384 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800038a:	f107 030c 	add.w	r3, r7, #12
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b23      	ldr	r3, [pc, #140]	; (8000428 <MX_GPIO_Init+0xa4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a22      	ldr	r2, [pc, #136]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b20      	ldr	r3, [pc, #128]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003b2:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a16      	ldr	r2, [pc, #88]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_GPIO_Init+0xa4>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003de:	603b      	str	r3, [r7, #0]
 80003e0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2108      	movs	r1, #8
 80003e6:	4811      	ldr	r0, [pc, #68]	; (800042c <MX_GPIO_Init+0xa8>)
 80003e8:	f000 fbcc 	bl	8000b84 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003ec:	2301      	movs	r3, #1
 80003ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f8:	f107 030c 	add.w	r3, r7, #12
 80003fc:	4619      	mov	r1, r3
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <MX_GPIO_Init+0xa8>)
 8000400:	f000 fa36 	bl	8000870 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000404:	2308      	movs	r3, #8
 8000406:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 030c 	add.w	r3, r7, #12
 8000418:	4619      	mov	r1, r3
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0xa8>)
 800041c:	f000 fa28 	bl	8000870 <HAL_GPIO_Init>

}
 8000420:	bf00      	nop
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000
 800042c:	48000400 	.word	0x48000400

08000430 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000438:	e7fe      	b.n	8000438 <Error_Handler+0x8>
	...

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x44>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x44>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x44>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <HAL_MspInit+0x44>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a08      	ldr	r2, [pc, #32]	; (8000480 <HAL_MspInit+0x44>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_MspInit+0x44>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	603b      	str	r3, [r7, #0]
 8000470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a18      	ldr	r2, [pc, #96]	; (8000504 <HAL_UART_MspInit+0x80>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d129      	bne.n	80004fa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004a6:	4b18      	ldr	r3, [pc, #96]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a17      	ldr	r2, [pc, #92]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a11      	ldr	r2, [pc, #68]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_UART_MspInit+0x84>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80004d6:	f248 0304 	movw	r3, #32772	; 0x8004
 80004da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e4:	2303      	movs	r3, #3
 80004e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004e8:	2307      	movs	r3, #7
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f6:	f000 f9bb 	bl	8000870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004fa:	bf00      	nop
 80004fc:	3728      	adds	r7, #40	; 0x28
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40004400 	.word	0x40004400
 8000508:	40021000 	.word	0x40021000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f884 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <SystemInit+0x20>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <SystemInit+0x20>)
 800056c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058a:	490e      	ldr	r1, [pc, #56]	; (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <LoopForever+0xe>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a0:	4c0b      	ldr	r4, [pc, #44]	; (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ae:	f7ff ffd7 	bl	8000560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b2:	f001 ff8b 	bl	80024cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b6:	f7ff fe5d 	bl	8000274 <main>

080005ba <LoopForever>:

LoopForever:
    b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005bc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c8:	0800257c 	.word	0x0800257c
  ldr r2, =_sbss
 80005cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d0:	200000b4 	.word	0x200000b4

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x28>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x28>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f90d 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f7ff ff22 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f917 	bl	8000856 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000640:	f000 f8ed 	bl	800081e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000008 	.word	0x20000008
 8000688:	200000b0 	.word	0x200000b0

0800068c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	200000b0 	.word	0x200000b0

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff47 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff5c 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffb0 	bl	80007c4 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087e:	e14e      	b.n	8000b1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f000 8140 	beq.w	8000b18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d005      	beq.n	80008b0 <HAL_GPIO_Init+0x40>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d130      	bne.n	8000912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2203      	movs	r2, #3
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68da      	ldr	r2, [r3, #12]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008e6:	2201      	movs	r2, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	f003 0201 	and.w	r2, r3, #1
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	2b03      	cmp	r3, #3
 800091c:	d017      	beq.n	800094e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	2b02      	cmp	r3, #2
 8000958:	d123      	bne.n	80009a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	6939      	ldr	r1, [r7, #16]
 800099e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0203 	and.w	r2, r3, #3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 809a 	beq.w	8000b18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	4b55      	ldr	r3, [pc, #340]	; (8000b3c <HAL_GPIO_Init+0x2cc>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a54      	ldr	r2, [pc, #336]	; (8000b3c <HAL_GPIO_Init+0x2cc>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <HAL_GPIO_Init+0x2cc>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009fc:	4a50      	ldr	r2, [pc, #320]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	220f      	movs	r2, #15
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a26:	d013      	beq.n	8000a50 <HAL_GPIO_Init+0x1e0>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a46      	ldr	r2, [pc, #280]	; (8000b44 <HAL_GPIO_Init+0x2d4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d00d      	beq.n	8000a4c <HAL_GPIO_Init+0x1dc>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a45      	ldr	r2, [pc, #276]	; (8000b48 <HAL_GPIO_Init+0x2d8>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d007      	beq.n	8000a48 <HAL_GPIO_Init+0x1d8>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <HAL_GPIO_Init+0x2dc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d101      	bne.n	8000a44 <HAL_GPIO_Init+0x1d4>
 8000a40:	2303      	movs	r3, #3
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x1e2>
 8000a44:	2305      	movs	r3, #5
 8000a46:	e004      	b.n	8000a52 <HAL_GPIO_Init+0x1e2>
 8000a48:	2302      	movs	r3, #2
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0x1e2>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <HAL_GPIO_Init+0x1e2>
 8000a50:	2300      	movs	r3, #0
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	f002 0203 	and.w	r2, r2, #3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a62:	4937      	ldr	r1, [pc, #220]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	3302      	adds	r3, #2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a94:	4a2e      	ldr	r2, [pc, #184]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000abe:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	fa22 f303 	lsr.w	r3, r2, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f47f aea9 	bne.w	8000880 <HAL_GPIO_Init+0x10>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000c00 	.word	0x48000c00
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	691a      	ldr	r2, [r3, #16]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	e001      	b.n	8000b76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	807b      	strh	r3, [r7, #2]
 8000b90:	4613      	mov	r3, r2
 8000b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b94:	787b      	ldrb	r3, [r7, #1]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b9a:	887a      	ldrh	r2, [r7, #2]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ba0:	e002      	b.n	8000ba8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	041a      	lsls	r2, r3, #16
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43d9      	mvns	r1, r3
 8000bd2:	887b      	ldrh	r3, [r7, #2]
 8000bd4:	400b      	ands	r3, r1
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f000 bef4 	b.w	80019ea <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 816a 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c12:	4bb3      	ldr	r3, [pc, #716]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d00c      	beq.n	8000c38 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c1e:	4bb0      	ldr	r3, [pc, #704]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 030c 	and.w	r3, r3, #12
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d159      	bne.n	8000cde <HAL_RCC_OscConfig+0xf6>
 8000c2a:	4bad      	ldr	r3, [pc, #692]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c36:	d152      	bne.n	8000cde <HAL_RCC_OscConfig+0xf6>
 8000c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c3c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c40:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c44:	fa93 f3a3 	rbit	r3, r3
 8000c48:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c4c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d102      	bne.n	8000c6a <HAL_RCC_OscConfig+0x82>
 8000c64:	4b9e      	ldr	r3, [pc, #632]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	e015      	b.n	8000c96 <HAL_RCC_OscConfig+0xae>
 8000c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c6e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c72:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c76:	fa93 f3a3 	rbit	r3, r3
 8000c7a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c82:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c86:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c8a:	fa93 f3a3 	rbit	r3, r3
 8000c8e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c92:	4b93      	ldr	r3, [pc, #588]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c9a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c9e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ca2:	fa92 f2a2 	rbit	r2, r2
 8000ca6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000caa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000cae:	fab2 f282 	clz	r2, r2
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	f042 0220 	orr.w	r2, r2, #32
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	f002 021f 	and.w	r2, r2, #31
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 810c 	beq.w	8000ee4 <HAL_RCC_OscConfig+0x2fc>
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8106 	bne.w	8000ee4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f000 be86 	b.w	80019ea <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce8:	d106      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x110>
 8000cea:	4b7d      	ldr	r3, [pc, #500]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a7c      	ldr	r2, [pc, #496]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e030      	b.n	8000d5a <HAL_RCC_OscConfig+0x172>
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x134>
 8000d02:	4b77      	ldr	r3, [pc, #476]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a76      	ldr	r2, [pc, #472]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b74      	ldr	r3, [pc, #464]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a73      	ldr	r2, [pc, #460]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e01e      	b.n	8000d5a <HAL_RCC_OscConfig+0x172>
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d26:	d10c      	bne.n	8000d42 <HAL_RCC_OscConfig+0x15a>
 8000d28:	4b6d      	ldr	r3, [pc, #436]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a6c      	ldr	r2, [pc, #432]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a69      	ldr	r2, [pc, #420]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e00b      	b.n	8000d5a <HAL_RCC_OscConfig+0x172>
 8000d42:	4b67      	ldr	r3, [pc, #412]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a66      	ldr	r2, [pc, #408]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b64      	ldr	r3, [pc, #400]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a63      	ldr	r2, [pc, #396]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d5a:	4b61      	ldr	r3, [pc, #388]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5e:	f023 020f 	bic.w	r2, r3, #15
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	495d      	ldr	r1, [pc, #372]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d059      	beq.n	8000e2c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fc88 	bl	800068c <HAL_GetTick>
 8000d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d80:	e00a      	b.n	8000d98 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fc83 	bl	800068c <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b64      	cmp	r3, #100	; 0x64
 8000d90:	d902      	bls.n	8000d98 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	f000 be29 	b.w	80019ea <HAL_RCC_OscConfig+0xe02>
 8000d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000dac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db0:	fab3 f383 	clz	r3, r3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d102      	bne.n	8000dca <HAL_RCC_OscConfig+0x1e2>
 8000dc4:	4b46      	ldr	r3, [pc, #280]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	e015      	b.n	8000df6 <HAL_RCC_OscConfig+0x20e>
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000de6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000dea:	fa93 f3a3 	rbit	r3, r3
 8000dee:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000df2:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dfa:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000dfe:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e02:	fa92 f2a2 	rbit	r2, r2
 8000e06:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e0a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	f042 0220 	orr.w	r2, r2, #32
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	f002 021f 	and.w	r2, r2, #31
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4013      	ands	r3, r2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0ab      	beq.n	8000d82 <HAL_RCC_OscConfig+0x19a>
 8000e2a:	e05c      	b.n	8000ee6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fc2e 	bl	800068c <HAL_GetTick>
 8000e30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e34:	e00a      	b.n	8000e4c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e36:	f7ff fc29 	bl	800068c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d902      	bls.n	8000e4c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f000 bdcf 	b.w	80019ea <HAL_RCC_OscConfig+0xe02>
 8000e4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e58:	fa93 f3a3 	rbit	r3, r3
 8000e5c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e60:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e64:	fab3 f383 	clz	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d102      	bne.n	8000e7e <HAL_RCC_OscConfig+0x296>
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	e015      	b.n	8000eaa <HAL_RCC_OscConfig+0x2c2>
 8000e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e82:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e86:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e8a:	fa93 f3a3 	rbit	r3, r3
 8000e8e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e96:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e9a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_RCC_OscConfig+0x2f8>)
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000eae:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000eb2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000eb6:	fa92 f2a2 	rbit	r2, r2
 8000eba:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000ebe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000ec2:	fab2 f282 	clz	r2, r2
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	f042 0220 	orr.w	r2, r2, #32
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	f002 021f 	and.w	r2, r2, #31
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1ab      	bne.n	8000e36 <HAL_RCC_OscConfig+0x24e>
 8000ede:	e002      	b.n	8000ee6 <HAL_RCC_OscConfig+0x2fe>
 8000ee0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 816f 	beq.w	80011d4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ef6:	4bd0      	ldr	r3, [pc, #832]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f02:	4bcd      	ldr	r3, [pc, #820]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d16c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x400>
 8000f0e:	4bca      	ldr	r3, [pc, #808]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d166      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x400>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f2c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f30:	fab3 f383 	clz	r3, r3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d102      	bne.n	8000f4a <HAL_RCC_OscConfig+0x362>
 8000f44:	4bbc      	ldr	r3, [pc, #752]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	e013      	b.n	8000f72 <HAL_RCC_OscConfig+0x38a>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f50:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f6e:	4bb2      	ldr	r3, [pc, #712]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	2202      	movs	r2, #2
 8000f74:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f78:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f7c:	fa92 f2a2 	rbit	r2, r2
 8000f80:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f84:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f88:	fab2 f282 	clz	r2, r2
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	f042 0220 	orr.w	r2, r2, #32
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	f002 021f 	and.w	r2, r2, #31
 8000f98:	2101      	movs	r1, #1
 8000f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d007      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x3cc>
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d002      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f000 bd1b 	b.w	80019ea <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb4:	4ba0      	ldr	r3, [pc, #640]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	21f8      	movs	r1, #248	; 0xf8
 8000fc4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fcc:	fa91 f1a1 	rbit	r1, r1
 8000fd0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000fd4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fd8:	fab1 f181 	clz	r1, r1
 8000fdc:	b2c9      	uxtb	r1, r1
 8000fde:	408b      	lsls	r3, r1
 8000fe0:	4995      	ldr	r1, [pc, #596]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	e0f5      	b.n	80011d4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8085 	beq.w	80010fe <HAL_RCC_OscConfig+0x516>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001006:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001014:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	461a      	mov	r2, r3
 800101c:	2301      	movs	r3, #1
 800101e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fb34 	bl	800068c <HAL_GetTick>
 8001024:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fb2f 	bl	800068c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d902      	bls.n	8001040 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	f000 bcd5 	b.w	80019ea <HAL_RCC_OscConfig+0xe02>
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001052:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <HAL_RCC_OscConfig+0x488>
 800106a:	4b73      	ldr	r3, [pc, #460]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	e013      	b.n	8001098 <HAL_RCC_OscConfig+0x4b0>
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001088:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001094:	4b68      	ldr	r3, [pc, #416]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	2202      	movs	r2, #2
 800109a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800109e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010a2:	fa92 f2a2 	rbit	r2, r2
 80010a6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80010aa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80010ae:	fab2 f282 	clz	r2, r2
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	f042 0220 	orr.w	r2, r2, #32
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	f002 021f 	and.w	r2, r2, #31
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0af      	beq.n	800102a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b5b      	ldr	r3, [pc, #364]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	21f8      	movs	r1, #248	; 0xf8
 80010da:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010e2:	fa91 f1a1 	rbit	r1, r1
 80010e6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010ea:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010ee:	fab1 f181 	clz	r1, r1
 80010f2:	b2c9      	uxtb	r1, r1
 80010f4:	408b      	lsls	r3, r1
 80010f6:	4950      	ldr	r1, [pc, #320]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e06a      	b.n	80011d4 <HAL_RCC_OscConfig+0x5ec>
 80010fe:	2301      	movs	r3, #1
 8001100:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001110:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800111e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	461a      	mov	r2, r3
 8001126:	2300      	movs	r3, #0
 8001128:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff faaf 	bl	800068c <HAL_GetTick>
 800112e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	e00a      	b.n	800114a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001134:	f7ff faaa 	bl	800068c <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d902      	bls.n	800114a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	f000 bc50 	b.w	80019ea <HAL_RCC_OscConfig+0xe02>
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800115c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d102      	bne.n	800117a <HAL_RCC_OscConfig+0x592>
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	e013      	b.n	80011a2 <HAL_RCC_OscConfig+0x5ba>
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800118c:	2302      	movs	r3, #2
 800118e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001192:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_RCC_OscConfig+0x650>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	2202      	movs	r2, #2
 80011a4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011ac:	fa92 f2a2 	rbit	r2, r2
 80011b0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011b4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011b8:	fab2 f282 	clz	r2, r2
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	f002 021f 	and.w	r2, r2, #31
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1af      	bne.n	8001134 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80da 	beq.w	8001398 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d069      	beq.n	80012c2 <HAL_RCC_OscConfig+0x6da>
 80011ee:	2301      	movs	r3, #1
 80011f0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011f8:	fa93 f3a3 	rbit	r3, r3
 80011fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001204:	fab3 f383 	clz	r3, r3
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_RCC_OscConfig+0x654>)
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	461a      	mov	r2, r3
 8001214:	2301      	movs	r3, #1
 8001216:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001218:	f7ff fa38 	bl	800068c <HAL_GetTick>
 800121c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001220:	e00e      	b.n	8001240 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fa33 	bl	800068c <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d906      	bls.n	8001240 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e3d9      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	10908120 	.word	0x10908120
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001252:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001256:	2202      	movs	r2, #2
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	fa93 f2a3 	rbit	r2, r3
 8001264:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800126e:	2202      	movs	r2, #2
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	fa93 f2a3 	rbit	r2, r3
 800127c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001280:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4ba5      	ldr	r3, [pc, #660]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001286:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800128a:	2102      	movs	r1, #2
 800128c:	6019      	str	r1, [r3, #0]
 800128e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	fa93 f1a3 	rbit	r1, r3
 8001298:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800129c:	6019      	str	r1, [r3, #0]
  return result;
 800129e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0b0      	beq.n	8001222 <HAL_RCC_OscConfig+0x63a>
 80012c0:	e06a      	b.n	8001398 <HAL_RCC_OscConfig+0x7b0>
 80012c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	fa93 f2a3 	rbit	r2, r3
 80012d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012d8:	601a      	str	r2, [r3, #0]
  return result;
 80012da:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	fab3 f383 	clz	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b8c      	ldr	r3, [pc, #560]	; (800151c <HAL_RCC_OscConfig+0x934>)
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	461a      	mov	r2, r3
 80012f0:	2300      	movs	r3, #0
 80012f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f4:	f7ff f9ca 	bl	800068c <HAL_GetTick>
 80012f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fc:	e009      	b.n	8001312 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff f9c5 	bl	800068c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e36b      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
 8001312:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001316:	2202      	movs	r2, #2
 8001318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	fa93 f2a3 	rbit	r2, r3
 8001324:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800132e:	2202      	movs	r2, #2
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	fa93 f2a3 	rbit	r2, r3
 800133c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001346:	2202      	movs	r2, #2
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	fa93 f2a3 	rbit	r2, r3
 8001354:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001358:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135a:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 800135c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001362:	2102      	movs	r1, #2
 8001364:	6019      	str	r1, [r3, #0]
 8001366:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	fa93 f1a3 	rbit	r1, r3
 8001370:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001374:	6019      	str	r1, [r3, #0]
  return result;
 8001376:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001386:	b2db      	uxtb	r3, r3
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	2101      	movs	r1, #1
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1b2      	bne.n	80012fe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8158 	beq.w	8001658 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ae:	4b5a      	ldr	r3, [pc, #360]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d112      	bne.n	80013e0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	4a56      	ldr	r2, [pc, #344]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c4:	61d3      	str	r3, [r2, #28]
 80013c6:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <HAL_RCC_OscConfig+0x938>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d11a      	bne.n	8001422 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <HAL_RCC_OscConfig+0x938>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <HAL_RCC_OscConfig+0x938>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f8:	f7ff f948 	bl	800068c <HAL_GetTick>
 80013fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e009      	b.n	8001416 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff f943 	bl	800068c <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	; 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e2e9      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <HAL_RCC_OscConfig+0x938>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0ef      	beq.n	8001402 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x852>
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a39      	ldr	r2, [pc, #228]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	e02f      	b.n	800149a <HAL_RCC_OscConfig+0x8b2>
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x876>
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4a33      	ldr	r2, [pc, #204]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6213      	str	r3, [r2, #32]
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a30      	ldr	r2, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001456:	f023 0304 	bic.w	r3, r3, #4
 800145a:	6213      	str	r3, [r2, #32]
 800145c:	e01d      	b.n	800149a <HAL_RCC_OscConfig+0x8b2>
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x89a>
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x8b2>
 8001482:	4b25      	ldr	r3, [pc, #148]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a24      	ldr	r2, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a21      	ldr	r2, [pc, #132]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d06b      	beq.n	800157c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7ff f8f2 	bl	800068c <HAL_GetTick>
 80014a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff f8ed 	bl	800068c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e291      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
 80014c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014ca:	2202      	movs	r2, #2
 80014cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	fa93 f2a3 	rbit	r2, r3
 80014d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014e2:	2202      	movs	r2, #2
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	fa93 f2a3 	rbit	r2, r3
 80014f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014f4:	601a      	str	r2, [r3, #0]
  return result;
 80014f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	fab3 f383 	clz	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d109      	bne.n	8001524 <HAL_RCC_OscConfig+0x93c>
 8001510:	4b01      	ldr	r3, [pc, #4]	; (8001518 <HAL_RCC_OscConfig+0x930>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	e014      	b.n	8001540 <HAL_RCC_OscConfig+0x958>
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	10908120 	.word	0x10908120
 8001520:	40007000 	.word	0x40007000
 8001524:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001528:	2202      	movs	r2, #2
 800152a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fa93 f2a3 	rbit	r2, r3
 8001536:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	4bbb      	ldr	r3, [pc, #748]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001544:	2102      	movs	r1, #2
 8001546:	6011      	str	r1, [r2, #0]
 8001548:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	fa92 f1a2 	rbit	r1, r2
 8001552:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001556:	6011      	str	r1, [r2, #0]
  return result;
 8001558:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	fab2 f282 	clz	r2, r2
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	f002 021f 	and.w	r2, r2, #31
 800156e:	2101      	movs	r1, #1
 8001570:	fa01 f202 	lsl.w	r2, r1, r2
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d099      	beq.n	80014ae <HAL_RCC_OscConfig+0x8c6>
 800157a:	e063      	b.n	8001644 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff f886 	bl	800068c <HAL_GetTick>
 8001580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	e00b      	b.n	800159e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff f881 	bl	800068c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e225      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
 800159e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015a2:	2202      	movs	r2, #2
 80015a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fa93 f2a3 	rbit	r2, r3
 80015b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ba:	2202      	movs	r2, #2
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	fa93 f2a3 	rbit	r2, r3
 80015c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015cc:	601a      	str	r2, [r3, #0]
  return result;
 80015ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d102      	bne.n	80015ee <HAL_RCC_OscConfig+0xa06>
 80015e8:	4b90      	ldr	r3, [pc, #576]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	e00d      	b.n	800160a <HAL_RCC_OscConfig+0xa22>
 80015ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015f2:	2202      	movs	r2, #2
 80015f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	4b89      	ldr	r3, [pc, #548]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800160e:	2102      	movs	r1, #2
 8001610:	6011      	str	r1, [r2, #0]
 8001612:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	fa92 f1a2 	rbit	r1, r2
 800161c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001620:	6011      	str	r1, [r2, #0]
  return result;
 8001622:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	fab2 f282 	clz	r2, r2
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	f002 021f 	and.w	r2, r2, #31
 8001638:	2101      	movs	r1, #1
 800163a:	fa01 f202 	lsl.w	r2, r1, r2
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1a0      	bne.n	8001586 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001644:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b77      	ldr	r3, [pc, #476]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	4a76      	ldr	r2, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001656:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 81c2 	beq.w	80019e8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001664:	4b71      	ldr	r3, [pc, #452]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	f000 819c 	beq.w	80019aa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b02      	cmp	r3, #2
 800167a:	f040 8114 	bne.w	80018a6 <HAL_RCC_OscConfig+0xcbe>
 800167e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001682:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	fa93 f2a3 	rbit	r2, r3
 8001692:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001696:	601a      	str	r2, [r3, #0]
  return result;
 8001698:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800169c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	fab3 f383 	clz	r3, r3
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	461a      	mov	r2, r3
 80016b0:	2300      	movs	r3, #0
 80016b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7fe ffea 	bl	800068c <HAL_GetTick>
 80016b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016bc:	e009      	b.n	80016d2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016be:	f7fe ffe5 	bl	800068c <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e18b      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
 80016d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016ea:	601a      	str	r2, [r3, #0]
  return result;
 80016ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	095b      	lsrs	r3, r3, #5
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_RCC_OscConfig+0xb24>
 8001706:	4b49      	ldr	r3, [pc, #292]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	e01b      	b.n	8001744 <HAL_RCC_OscConfig+0xb5c>
 800170c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800172a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	fa93 f2a3 	rbit	r2, r3
 800173a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800174c:	6011      	str	r1, [r2, #0]
 800174e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	fa92 f1a2 	rbit	r1, r2
 8001758:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800175c:	6011      	str	r1, [r2, #0]
  return result;
 800175e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	fab2 f282 	clz	r2, r2
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f042 0220 	orr.w	r2, r2, #32
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f002 021f 	and.w	r2, r2, #31
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d19e      	bne.n	80016be <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001780:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	430b      	orrs	r3, r1
 8001796:	4925      	ldr	r1, [pc, #148]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b4:	601a      	str	r2, [r3, #0]
  return result;
 80017b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017c6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	461a      	mov	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7fe ff5b 	bl	800068c <HAL_GetTick>
 80017d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017da:	e009      	b.n	80017f0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017dc:	f7fe ff56 	bl	800068c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0fc      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
 80017f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001808:	601a      	str	r2, [r3, #0]
  return result;
 800180a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800180e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0xc48>
 8001824:	4b01      	ldr	r3, [pc, #4]	; (800182c <HAL_RCC_OscConfig+0xc44>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	e01e      	b.n	8001868 <HAL_RCC_OscConfig+0xc80>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fa93 f2a3 	rbit	r2, r3
 8001844:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800184e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	fa93 f2a3 	rbit	r2, r3
 800185e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	4b63      	ldr	r3, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0xe0c>)
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800186c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001870:	6011      	str	r1, [r2, #0]
 8001872:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	fa92 f1a2 	rbit	r1, r2
 800187c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001880:	6011      	str	r1, [r2, #0]
  return result;
 8001882:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	fab2 f282 	clz	r2, r2
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	f042 0220 	orr.w	r2, r2, #32
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f002 021f 	and.w	r2, r2, #31
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d09b      	beq.n	80017dc <HAL_RCC_OscConfig+0xbf4>
 80018a4:	e0a0      	b.n	80019e8 <HAL_RCC_OscConfig+0xe00>
 80018a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	601a      	str	r2, [r3, #0]
  return result;
 80018c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	461a      	mov	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7fe fed6 	bl	800068c <HAL_GetTick>
 80018e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e6:	f7fe fed1 	bl	800068c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e077      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001902:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	fa93 f2a3 	rbit	r2, r3
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	601a      	str	r2, [r3, #0]
  return result;
 8001914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001918:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	b2db      	uxtb	r3, r3
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b01      	cmp	r3, #1
 800192c:	d102      	bne.n	8001934 <HAL_RCC_OscConfig+0xd4c>
 800192e:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0xe0c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e01b      	b.n	800196c <HAL_RCC_OscConfig+0xd84>
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800193c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	fa93 f2a3 	rbit	r2, r3
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_OscConfig+0xe0c>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	f107 0210 	add.w	r2, r7, #16
 8001970:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001974:	6011      	str	r1, [r2, #0]
 8001976:	f107 0210 	add.w	r2, r7, #16
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	fa92 f1a2 	rbit	r1, r2
 8001980:	f107 020c 	add.w	r2, r7, #12
 8001984:	6011      	str	r1, [r2, #0]
  return result;
 8001986:	f107 020c 	add.w	r2, r7, #12
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	fab2 f282 	clz	r2, r2
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f002 021f 	and.w	r2, r2, #31
 800199c:	2101      	movs	r1, #1
 800199e:	fa01 f202 	lsl.w	r2, r1, r2
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d19e      	bne.n	80018e6 <HAL_RCC_OscConfig+0xcfe>
 80019a8:	e01e      	b.n	80019e8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e018      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_RCC_OscConfig+0xe0c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019c0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019d2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b09e      	sub	sp, #120	; 0x78
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e162      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b90      	ldr	r3, [pc, #576]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b8d      	ldr	r3, [pc, #564]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	498b      	ldr	r1, [pc, #556]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e14a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4b82      	ldr	r3, [pc, #520]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	497f      	ldr	r1, [pc, #508]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80dc 	beq.w	8001c24 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d13c      	bne.n	8001aee <HAL_RCC_ClockConfig+0xf6>
 8001a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xa6>
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	e00f      	b.n	8001abe <HAL_RCC_ClockConfig+0xc6>
 8001a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	667b      	str	r3, [r7, #100]	; 0x64
 8001aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ab4:	fa93 f3a3 	rbit	r3, r3
 8001ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ac6:	fa92 f2a2 	rbit	r2, r2
 8001aca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001acc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ace:	fab2 f282 	clz	r2, r2
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	f042 0220 	orr.w	r2, r2, #32
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	f002 021f 	and.w	r2, r2, #31
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d17b      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0f3      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d13c      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x178>
 8001af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	095b      	lsrs	r3, r3, #5
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d102      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x128>
 8001b1a:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	e00f      	b.n	8001b40 <HAL_RCC_ClockConfig+0x148>
 8001b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
 8001b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b44:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b48:	fa92 f2a2 	rbit	r2, r2
 8001b4c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b50:	fab2 f282 	clz	r2, r2
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f042 0220 	orr.w	r2, r2, #32
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	f002 021f 	and.w	r2, r2, #31
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f202 	lsl.w	r2, r1, r2
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d13a      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b2      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2de>
 8001b70:	2302      	movs	r3, #2
 8001b72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	095b      	lsrs	r3, r3, #5
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d102      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x1a0>
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e00d      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1bc>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	61ba      	str	r2, [r7, #24]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	fa92 f2a2 	rbit	r2, r2
 8001bbe:	617a      	str	r2, [r7, #20]
  return result;
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	fab2 f282 	clz	r2, r2
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f042 0220 	orr.w	r2, r2, #32
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	f002 021f 	and.w	r2, r2, #31
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e079      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	491a      	ldr	r1, [pc, #104]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7fe fd4a 	bl	800068c <HAL_GetTick>
 8001bf8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7fe fd46 	bl	800068c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e061      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d214      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f023 0207 	bic.w	r2, r3, #7
 8001c3a:	4906      	ldr	r1, [pc, #24]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_ClockConfig+0x25c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e040      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x2de>
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	491a      	ldr	r1, [pc, #104]	; (8001ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4912      	ldr	r1, [pc, #72]	; (8001ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c9a:	f000 f829 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <HAL_RCC_ClockConfig+0x2e8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca8:	22f0      	movs	r2, #240	; 0xf0
 8001caa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	60fa      	str	r2, [r7, #12]
  return result;
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	40d3      	lsrs	r3, r2
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x2ec>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc6:	4a08      	ldr	r2, [pc, #32]	; (8001ce8 <HAL_RCC_ClockConfig+0x2f0>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_RCC_ClockConfig+0x2f4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc98 	bl	8000604 <HAL_InitTick>
  
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3778      	adds	r7, #120	; 0x78
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	0800253c 	.word	0x0800253c
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x30>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x36>
 8001d1e:	e03c      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d22:	623b      	str	r3, [r7, #32]
      break;
 8001d24:	e03c      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	607a      	str	r2, [r7, #4]
  return result;
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	40d3      	lsrs	r3, r2
 8001d44:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	220f      	movs	r2, #15
 8001d54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	60fa      	str	r2, [r7, #12]
  return result;
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	40d3      	lsrs	r3, r2
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d6a:	5cd3      	ldrb	r3, [r2, r3]
 8001d6c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	e004      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	623b      	str	r3, [r7, #32]
      break;
 8001d98:	e002      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d9c:	623b      	str	r3, [r7, #32]
      break;
 8001d9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	372c      	adds	r7, #44	; 0x2c
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	08002554 	.word	0x08002554
 8001dbc:	08002564 	.word	0x08002564
 8001dc0:	003d0900 	.word	0x003d0900

08001dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001de2:	f7ff ffef 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001de6:	4601      	mov	r1, r0
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001df0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001df4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	fa92 f2a2 	rbit	r2, r2
 8001dfc:	603a      	str	r2, [r7, #0]
  return result;
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	40d3      	lsrs	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	0800254c 	.word	0x0800254c

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e26:	f7ff ffcd 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	fa92 f2a2 	rbit	r2, r2
 8001e40:	603a      	str	r2, [r7, #0]
  return result;
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	40d3      	lsrs	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	0800254c 	.word	0x0800254c

08001e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e040      	b.n	8001ef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fafc 	bl	8000484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f82c 	bl	8001f00 <UART_SetConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e022      	b.n	8001ef8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f956 	bl	800216c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f9dd 	bl	80022b0 <UART_CheckIdleState>
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <UART_SetConfig+0x254>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6812      	ldr	r2, [r2, #0]
 8001f32:	6979      	ldr	r1, [r7, #20]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a78      	ldr	r2, [pc, #480]	; (8002158 <UART_SetConfig+0x258>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d120      	bne.n	8001fbe <UART_SetConfig+0xbe>
 8001f7c:	4b77      	ldr	r3, [pc, #476]	; (800215c <UART_SetConfig+0x25c>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d817      	bhi.n	8001fb8 <UART_SetConfig+0xb8>
 8001f88:	a201      	add	r2, pc, #4	; (adr r2, 8001f90 <UART_SetConfig+0x90>)
 8001f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8e:	bf00      	nop
 8001f90:	08001fa1 	.word	0x08001fa1
 8001f94:	08001fad 	.word	0x08001fad
 8001f98:	08001fb3 	.word	0x08001fb3
 8001f9c:	08001fa7 	.word	0x08001fa7
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	77fb      	strb	r3, [r7, #31]
 8001fa4:	e01d      	b.n	8001fe2 <UART_SetConfig+0xe2>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	77fb      	strb	r3, [r7, #31]
 8001faa:	e01a      	b.n	8001fe2 <UART_SetConfig+0xe2>
 8001fac:	2304      	movs	r3, #4
 8001fae:	77fb      	strb	r3, [r7, #31]
 8001fb0:	e017      	b.n	8001fe2 <UART_SetConfig+0xe2>
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	77fb      	strb	r3, [r7, #31]
 8001fb6:	e014      	b.n	8001fe2 <UART_SetConfig+0xe2>
 8001fb8:	2310      	movs	r3, #16
 8001fba:	77fb      	strb	r3, [r7, #31]
 8001fbc:	e011      	b.n	8001fe2 <UART_SetConfig+0xe2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a67      	ldr	r2, [pc, #412]	; (8002160 <UART_SetConfig+0x260>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d102      	bne.n	8001fce <UART_SetConfig+0xce>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	77fb      	strb	r3, [r7, #31]
 8001fcc:	e009      	b.n	8001fe2 <UART_SetConfig+0xe2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a64      	ldr	r2, [pc, #400]	; (8002164 <UART_SetConfig+0x264>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d102      	bne.n	8001fde <UART_SetConfig+0xde>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
 8001fdc:	e001      	b.n	8001fe2 <UART_SetConfig+0xe2>
 8001fde:	2310      	movs	r3, #16
 8001fe0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fea:	d15b      	bne.n	80020a4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d827      	bhi.n	8002042 <UART_SetConfig+0x142>
 8001ff2:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <UART_SetConfig+0xf8>)
 8001ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff8:	0800201d 	.word	0x0800201d
 8001ffc:	08002025 	.word	0x08002025
 8002000:	0800202d 	.word	0x0800202d
 8002004:	08002043 	.word	0x08002043
 8002008:	08002033 	.word	0x08002033
 800200c:	08002043 	.word	0x08002043
 8002010:	08002043 	.word	0x08002043
 8002014:	08002043 	.word	0x08002043
 8002018:	0800203b 	.word	0x0800203b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800201c:	f7ff fede 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 8002020:	61b8      	str	r0, [r7, #24]
        break;
 8002022:	e013      	b.n	800204c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002024:	f7ff fefc 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002028:	61b8      	str	r0, [r7, #24]
        break;
 800202a:	e00f      	b.n	800204c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800202c:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <UART_SetConfig+0x268>)
 800202e:	61bb      	str	r3, [r7, #24]
        break;
 8002030:	e00c      	b.n	800204c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002032:	f7ff fe5d 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8002036:	61b8      	str	r0, [r7, #24]
        break;
 8002038:	e008      	b.n	800204c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800203a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203e:	61bb      	str	r3, [r7, #24]
        break;
 8002040:	e004      	b.n	800204c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	77bb      	strb	r3, [r7, #30]
        break;
 800204a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d074      	beq.n	800213c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	005a      	lsls	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	441a      	add	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	b29b      	uxth	r3, r3
 8002068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d916      	bls.n	800209e <UART_SetConfig+0x19e>
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	d212      	bcs.n	800209e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	b29b      	uxth	r3, r3
 800207c:	f023 030f 	bic.w	r3, r3, #15
 8002080:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	b29b      	uxth	r3, r3
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	b29a      	uxth	r2, r3
 800208e:	89fb      	ldrh	r3, [r7, #14]
 8002090:	4313      	orrs	r3, r2
 8002092:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	89fa      	ldrh	r2, [r7, #14]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	e04e      	b.n	800213c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	77bb      	strb	r3, [r7, #30]
 80020a2:	e04b      	b.n	800213c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020a4:	7ffb      	ldrb	r3, [r7, #31]
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d827      	bhi.n	80020fa <UART_SetConfig+0x1fa>
 80020aa:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <UART_SetConfig+0x1b0>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020d5 	.word	0x080020d5
 80020b4:	080020dd 	.word	0x080020dd
 80020b8:	080020e5 	.word	0x080020e5
 80020bc:	080020fb 	.word	0x080020fb
 80020c0:	080020eb 	.word	0x080020eb
 80020c4:	080020fb 	.word	0x080020fb
 80020c8:	080020fb 	.word	0x080020fb
 80020cc:	080020fb 	.word	0x080020fb
 80020d0:	080020f3 	.word	0x080020f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020d4:	f7ff fe82 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 80020d8:	61b8      	str	r0, [r7, #24]
        break;
 80020da:	e013      	b.n	8002104 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80020dc:	f7ff fea0 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 80020e0:	61b8      	str	r0, [r7, #24]
        break;
 80020e2:	e00f      	b.n	8002104 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <UART_SetConfig+0x268>)
 80020e6:	61bb      	str	r3, [r7, #24]
        break;
 80020e8:	e00c      	b.n	8002104 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020ea:	f7ff fe01 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 80020ee:	61b8      	str	r0, [r7, #24]
        break;
 80020f0:	e008      	b.n	8002104 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020f6:	61bb      	str	r3, [r7, #24]
        break;
 80020f8:	e004      	b.n	8002104 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	77bb      	strb	r3, [r7, #30]
        break;
 8002102:	bf00      	nop
    }

    if (pclk != 0U)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d018      	beq.n	800213c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	085a      	lsrs	r2, r3, #1
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	441a      	add	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	b29b      	uxth	r3, r3
 800211e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	d908      	bls.n	8002138 <UART_SetConfig+0x238>
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d204      	bcs.n	8002138 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	e001      	b.n	800213c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002148:	7fbb      	ldrb	r3, [r7, #30]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	efff69f3 	.word	0xefff69f3
 8002158:	40013800 	.word	0x40013800
 800215c:	40021000 	.word	0x40021000
 8002160:	40004400 	.word	0x40004400
 8002164:	40004800 	.word	0x40004800
 8002168:	007a1200 	.word	0x007a1200

0800216c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00a      	beq.n	80021da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01a      	beq.n	8002282 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226a:	d10a      	bne.n	8002282 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
  }
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80022c0:	f7fe f9e4 	bl	800068c <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d10e      	bne.n	80022f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f82d 	bl	8002342 <UART_WaitOnFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e023      	b.n	800233a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d10e      	bne.n	800231e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f817 	bl	8002342 <UART_WaitOnFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e00d      	b.n	800233a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b09c      	sub	sp, #112	; 0x70
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002352:	e0a5      	b.n	80024a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800235a:	f000 80a1 	beq.w	80024a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235e:	f7fe f995 	bl	800068c <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800236a:	429a      	cmp	r2, r3
 800236c:	d302      	bcc.n	8002374 <UART_WaitOnFlagUntilTimeout+0x32>
 800236e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002370:	2b00      	cmp	r3, #0
 8002372:	d13e      	bne.n	80023f2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800237c:	e853 3f00 	ldrex	r3, [r3]
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002384:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002388:	667b      	str	r3, [r7, #100]	; 0x64
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002394:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002398:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80023a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e6      	bne.n	8002374 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3308      	adds	r3, #8
 80023ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b0:	e853 3f00 	ldrex	r3, [r3]
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	663b      	str	r3, [r7, #96]	; 0x60
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	3308      	adds	r3, #8
 80023c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80023c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80023cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80023d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e5      	bne.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e067      	b.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d04f      	beq.n	80024a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800240e:	d147      	bne.n	80024a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002418:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	e853 3f00 	ldrex	r3, [r3]
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800242e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800243e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002440:	e841 2300 	strex	r3, r2, [r1]
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e6      	bne.n	800241a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3308      	adds	r3, #8
 8002452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	e853 3f00 	ldrex	r3, [r3]
 800245a:	613b      	str	r3, [r7, #16]
   return(result);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f023 0301 	bic.w	r3, r3, #1
 8002462:	66bb      	str	r3, [r7, #104]	; 0x68
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3308      	adds	r3, #8
 800246a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800246c:	623a      	str	r2, [r7, #32]
 800246e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	69f9      	ldr	r1, [r7, #28]
 8002472:	6a3a      	ldr	r2, [r7, #32]
 8002474:	e841 2300 	strex	r3, r2, [r1]
 8002478:	61bb      	str	r3, [r7, #24]
   return(result);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e5      	bne.n	800244c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2220      	movs	r2, #32
 8002484:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e010      	b.n	80024c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4013      	ands	r3, r2
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	f43f af4a 	beq.w	8002354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3770      	adds	r7, #112	; 0x70
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	4d0d      	ldr	r5, [pc, #52]	; (8002504 <__libc_init_array+0x38>)
 80024d0:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d2:	1b64      	subs	r4, r4, r5
 80024d4:	10a4      	asrs	r4, r4, #2
 80024d6:	2600      	movs	r6, #0
 80024d8:	42a6      	cmp	r6, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	4d0b      	ldr	r5, [pc, #44]	; (800250c <__libc_init_array+0x40>)
 80024de:	4c0c      	ldr	r4, [pc, #48]	; (8002510 <__libc_init_array+0x44>)
 80024e0:	f000 f820 	bl	8002524 <_init>
 80024e4:	1b64      	subs	r4, r4, r5
 80024e6:	10a4      	asrs	r4, r4, #2
 80024e8:	2600      	movs	r6, #0
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f4:	4798      	blx	r3
 80024f6:	3601      	adds	r6, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fe:	4798      	blx	r3
 8002500:	3601      	adds	r6, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	08002574 	.word	0x08002574
 8002508:	08002574 	.word	0x08002574
 800250c:	08002574 	.word	0x08002574
 8002510:	08002578 	.word	0x08002578

08002514 <memset>:
 8002514:	4402      	add	r2, r0
 8002516:	4603      	mov	r3, r0
 8002518:	4293      	cmp	r3, r2
 800251a:	d100      	bne.n	800251e <memset+0xa>
 800251c:	4770      	bx	lr
 800251e:	f803 1b01 	strb.w	r1, [r3], #1
 8002522:	e7f9      	b.n	8002518 <memset+0x4>

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr
